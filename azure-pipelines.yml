trigger:
- main
- master
- releases/*

name: $(BuildDefinitionName).$(DayOfYear)$(Rev:.r)

pool:
  vmImage: 'ubuntu-latest'

parameters: 
- name: build_configuration
  displayName: Build Configuration
  type: string
  default: 'Release'

- name: azure_subscription
  displayName: Azure Subscription
  type: string
  default: 'ClassiAds'

- name: app_name
  displayName: App Name
  type: string
  default: 'ecograze'

- name: resource_group
  displayName: Resource Group
  type: string
  default: 'cleancodeservice'


variables:
  buildConfiguration: ${{ parameters.build_configuration }}
  azureSubscription: ${{ parameters.azure_subscription }}
  currentDate: $[ format('{0:yyyy}{0:MM}{0:dd}', pipeline.startTime) ]
  currentTime: $[ format('{0:HH}{0:mm}', pipeline.startTime) ]
  appName: ${{ parameters.app_name }}
  resourceGroupName: ${{ parameters.resource_group }}
  artifactName: build-release_$(currentDate)_$(currentTime)_v$(Build.BuildId).zip

stages:
- stage: Restore
  jobs:
  - job: Restore
    displayName: 'Restore dependencies'
    steps:
    - task: UseDotNet@2
      inputs:
        packageType: 'sdk'
        version: '8.0.x'
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - script: |
        dotnet restore
      displayName: 'Restore dependencies'

- stage: Build
  dependsOn: Restore
  jobs:
  - job: Build
    displayName: 'Build'
    steps:
    - script: |
        dotnet build --configuration $(buildConfiguration)
      displayName: 'Build solution'

- stage: Test
  dependsOn: Build
  jobs:
  - job: Test
    displayName: 'Test'
    steps:
    - script: |
        dotnet test --configuration $(buildConfiguration) --no-build --verbosity normal
      displayName: 'Run tests'

- stage: Publish
  dependsOn: Test
  jobs:
  - job: Publish
    displayName: 'Publish'
    steps:
    - script: |
        dotnet publish --configuration $(buildConfiguration) --output $(Build.ArtifactStagingDirectory)
        cd $(Build.ArtifactStagingDirectory)
        zip -r $(Build.ArtifactStagingDirectory)/$(artifactName) .
      displayName: 'Publish artifacts'

    - publish: $(Build.ArtifactStagingDirectory)/$(artifactName)
      artifact: drop

- stage: Deploy
  dependsOn: Publish
  jobs:
  - deployment: Deploy
    displayName: 'Deploy to Azure App Service'
    environment: 'production'
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop

          - task: AzureRmWebAppDeployment@4
            inputs:
              ConnectionType: 'AzureRM'
              azureSubscription: 'Eco-Graze-Service-Connection'
              appType: 'webAppLinux'
              WebAppName: $(appName)
              packageForLinux: '$(Pipeline.Workspace)/drop/$(artifactName)'
